package 遇到的面试题.大疆;

/**
 * https://leetcode.cn/problems/dungeon-game/description/
 *
 * 恶魔们抓住了公主并将她关在了地下城 dungeon 的 右下角 。地下城是由 m x n 个房间组成的二维网格。我们英勇的骑士最初被安置在 左上角 的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
 * 骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
 * 有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。
 * 为了尽快解救公主，骑士决定每次只 向右 或 向下 移动一步。
 *
 * 返回确保骑士能够拯救到公主所需的最低初始健康点数。
 *
 * 注意：任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。
 */
public class _174_地下城游戏 {
    /*
    dp[i][j] 表示从点 (i, j) 到右下角 (m-1, n-1) 所需要的最小初始能量。这意味着，我们的DP表是从右下角向左上角计算的。
    状态转移：
        确保路径上任何点的能量都不会小于1。
        考虑每一点 (i, j)，你可以从这一点向右移动到 (i, j+1) 或向下移动到 (i+1, j)。因此，dp[i][j] 应该基于这两个可能的下一步的最小能量需求来计算。
        dp[i][j] + grid[i][j] = Math.min(dp[i + 1][j], dp[i][j + 1])

        dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - grid[i][j]) // 这里是确保每个点的能量最少为1，本质还是求min  只是为了确保不能出<1的点

     */
    public int calculateMinimumHP(int[][] grid) {
        return  0;
    }
}
